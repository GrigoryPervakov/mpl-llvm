"module" useFile

module: "test" LLVMModule;
ArchType.x86 module.dataLayout.!arch
VendorType.PC module.dataLayout.!vendor
OSType.Win32 module.dataLayout.!ostype
EnvironmentType.MSVC module.dataLayout.!environment

Endian.Little module.dataLayout.!endian
Mangling.Winx86 module.dataLayout.!mangling
32 module.dataLayout.!stack
32 32 Alignment.Pointer module.dataLayout.appendAlign
64 64 Alignment.Integer module.dataLayout.appendAlign
80 32 Alignment.Float module.dataLayout.appendAlign
8 16 32 AlignmentPrefer.Natural module.dataLayout.appendAlign
0 32 Alignment.Aggregate module.dataLayout.appendAlign

#mul_add(x, y, z) = x * y + z
[
  f: "mul_add" 32 IntegerType ( 32 IntegerType 32 IntegerType 32 IntegerType ) module.getOrInsertFunction;
  builder: f.appendBasicBlock IRBuilder;

  RT: "struct.RT" ( 8 IntegerType 32 IntegerType 20 ArrayType 10 ArrayType 8 IntegerType ) StructType module.insertTypeAlias;
  ST: "struct.ST" ( 32 IntegerType 64 FloatType RT ) StructType module.insertTypeAlias;
  ptr: ST 4 builder.allocOneAligned;
  addr: ptr ( 1 32 IntegerType Constant 2 32 IntegerType Constant 1 32 IntegerType Constant 5 32 IntegerType Constant 13 32 IntegerType Constant ) builder.addGEP;

  x:  0 f.inputValues.at; "x" x.!name
  y:  1 f.inputValues.at; "y" y.!name
  z:  2 f.inputValues.at; "z" z.!name

  tmp: x y builder.addMul;
  tmp2: tmp z builder.addAdd;
  tmp2 builder.addRet
] call

#max(a, b)= maximum(a, b)
[
  max: "max" 32 IntegerType ( ) module.getOrInsertFunction;

  builder: max.appendBasicBlock IRBuilder;
  left: max.appendBasicBlock;
  right: max.appendBasicBlock;
  a: 32 IntegerType max.appendArgument ; "a" a.!name
  b: 32 IntegerType max.appendArgument ; "b" b.!name
  cmpVal: IntegerCompareCondition.SignedGreaterThan a b builder.addICmp;
  cmpVal left right builder.addBrCond
  a left IRBuilder.addRet
  b right IRBuilder.addRet
] call

#fact(n) = n!
[
  fact: "fact" 32 IntegerType ( 32 IntegerType ) module.getOrInsertFunction;
  n:0 fact.inputValues.at; "n" n.!name

  builder: fact.appendBasicBlock IRBuilder;
  a: 32 IntegerType builder.allocOne;
  i: 32 IntegerType builder.allocOne;
  a 1 32 IntegerType Constant builder.addStore
  i 1 32 IntegerType Constant builder.addStore

  loopCheck: fact.appendBasicBlock;
  loopCheck builder.addBrUncond
  loopCheck IRBuilder !builder
  iVal: i builder.addLoad;
  incVal: iVal 1 32 IntegerType Constant builder.addAdd;
  i incVal builder.addStore
  cmpVal: IntegerCompareCondition.UnsignedLessOrEqual incVal n builder.addICmp; 
  loop: fact.appendBasicBlock;
  result: fact.appendBasicBlock;
  cmpVal loop result builder.addBrCond

  loop IRBuilder !builder
  buf: a builder.addLoad;
  iVal: i builder.addLoad;
  a buf iVal builder.addMul builder.addStore
  loopCheck builder.addBrUncond

  result IRBuilder !builder
  a builder.addLoad builder.addRet
] call

#[
#  32 IntegerType addVectorTypeDeclaration
#] call

#main()
[
  strArr: "strFormat" 8 IntegerType 4 ArrayType "%d\\0A\\00" module.insertGlobalConstant;
  printf: "printf" 32 IntegerType ( 8 IntegerType PointerType VarargType ) module.getOrInsertFunctionDeclaration;

  main: "main" 32 IntegerType ( ) module.getOrInsertFunction;
  builder: main.appendBasicBlock IRBuilder;
  res: "fact" 32 IntegerType ( 32 IntegerType ) module.getOrInsertFunction ( 10 32 IntegerType Constant ) builder.addCall;
  strptr: strArr ( 0 32 IntegerType Constant 0 32 IntegerType Constant ) builder.addGEP;
  printf ( strptr res ) builder.addCall drop
  0 32 IntegerType Constant builder.addRet
] call

#anonymous
[
  strArr: 8 IntegerType 4 ArrayType "%d\\0A\\00" module.insertAnonymousConstant;
  strArr2: 8 IntegerType 4 ArrayType "%c\\0A\\00" module.insertAnonymousConstant;
  
  use: 32 IntegerType (  32 IntegerType ( 32 IntegerType ) FunctionType PointerType )
  module.insertAnonymousFunction;
  arg: 0 use.inputValues.at; "arg" arg.!name
  builder: use.appendBasicBlock IRBuilder;
  arg (1 32 IntegerType Constant) builder.addCall
  builder.addRet
  
  
  one: 32 IntegerType ( 32 IntegerType ) module.insertAnonymousFunction;
  0 one.inputValues.at !arg
  "arg" arg.!name
  one.appendBasicBlock IRBuilder !builder
  arg builder.addRet
  
  main: 32 IntegerType ( ) module.insertAnonymousFunction;
  main.appendBasicBlock IRBuilder !builder
  use ( one FunctionPointer ) builder.addCall
  builder.addRet
] call

module.getIR print
